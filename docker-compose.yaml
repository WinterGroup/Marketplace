services:
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./backend/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - users_service
      - product_service
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --bind 0.0.0.0

  confirmation_service:
    build: ./backend/confirmation_service/
    container_name: confirmation_service
    volumes:
      - ./backend/confirmation_service/:/app
    ports:
      - "8004:8000"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network
    environment:
      SECRET_KEY: ${SECRET_KEY}

  users_service:
    build: ./backend/users_service/
    container_name: users_service
    volumes:
      - ./backend/users_service/:/app
    ports:
      - "8001:8000"
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - app-network
    environment:
      SECRET_KEY: ${SECRET_KEY}
      JWT_KEY: ${JWT_KEY}

  product_service:
    build: ./backend/product_service
    container_name: product_service
    volumes:
      - ./backend/product_service/:/app
    ports:
      - "8002:8000"
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - app-network
    environment:
      SECRET_KEY: ${SECRET_KEY}
      JWT_KEY: ${JWT_KEY}
  order_service:
    build: ./backend/orders_service
    container_name: order_service
    volumes:
      - ./backend/orders_service/:/app
    ports:
      - "8003:8000"
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - app-network
    environment:
      SECRET_KEY: ${SECRET_KEY}
      JWT_KEY: ${JWT_KEY}
  frontend:
    build: ./frontend
    container_name: frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules  
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
    restart: unless-stopped
    networks:
      - app-network
    command: ["npm", "run", "dev"]
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
